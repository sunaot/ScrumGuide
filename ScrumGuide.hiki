// [用語集]
// :ship:出荷する
// :deliver:納品する
// :implement: 実装とは別の何か。[導入]
// :work: 仕事
// [注意]
// 「〜ための」は避ける。「することの」を避ける。
// 最優先事項 -> 最優先項目

[[cover.gif]]

//! Acknowledgements 

!謝辞

//!! General 
//Scrum is based on industry-accepted best practices, used and proven for decades. It is then set in an empirical process theory. As Jim Coplien once remarked to Jeff, “Everyone will like Scrum; it is what we already do when our back is against the wall.” 

!! 全般
スクラムは、産業界で受け入れられたベストプラクティスに基づいている。
それらは、数十年かけて使用され、実証されてきたものだ。
後に経験プロセス理論の一部となっている。
ある時、Jim CoplienがJeff Sutherlandに言った。
「
みんなスクラムが好きになるよ。
追い詰められた時にいつもやってることなんだから
」

//!!People  
//Of the thousands of people that have contributed to Scrum, we should single out those that were instrumental in its first ten years. First there were Jeff Sutherland, working with Jeff Mckenna, and Ken Schwaber with Mike Smith and Chris Martin. Scrum was first formally presented and published at OOPSLA 1995. During the next five years, Mike Beadle and Martine Devos made significant contributions. And then everyone else, without whose help Scrum wouldn’t have been refined into what it is today. 

!!人々
スクラムに貢献してくれた非常に多くの人たちのなかから、
最初の10年間に貢献してくれた人を選んでいこう。
まず、Jeff SutherlandとJeff Mckenna。
それから、Ken SchwaberとMike SmithとChris Martinだ。
スクラムは、公式には OOPSLA 1995 で発表された。
次の5年間では、Mike BeadleとMartine Devosが大きな貢献をしてくれた。
そして、その他のみなさん。
みなさんの助けがなければ、今のように洗練されたスクラムはなかっただろう。

//!!History 
//The history of Scrum can already be considered long in the world of software development. To honor the first places where it was tried and refined, we honor Individual, Inc., Fidelity Investments, and IDX (now GE Medical).

!!歴史
スクラムの歴史は、ソフトウェア開発の世界だと、すでに長い部類に入っていることだろう。まずお礼を述べたいのは、最初の試行錯誤の場である。Individual, Inc.、Fidelity Investments、IDX（現 GE Medical）に感謝したい。

//PURPOSE
//Scrum has been used to develop complex products since the early 1990s. This paper describes how to use Scrum to build products. Scrum is not a process or a technique for building products; rather, it is a framework within which you can employ various processes and techniques. The role of Scrum is to surface the relative efficacy of your development practices so that you can improve upon them while providing a framework within which complex products can be developed. 

!目的
スクラムは1990年代初頭から複雑なプロダクトの開発に使用されてきた。
本稿では、スクラムをプロダクト開発に使用する方法を説明する。
ただし、スクラムはプロセスや技術ではない。
正しくは、様々なプロセスや技術を取り込むことのできるフレームワークである。
スクラムの役割はあなたが開発プラクティスを使って改善していけるように、その相対的な効果を浮き彫りにすることだ。
そのために複雑なプロダクトが開発可能なフレームワークを提供する。

//SCRUM THEORY 
//Scrum, which is grounded in empirical process control theory, employs an iterative, incremental approach to optimize predictability and control risk. Three pillars uphold every every implementation of empirical process control. 

!スクラムの理論
スクラムは「経験的プロセス制御」の理論を根拠としており、反復的で漸進的な手法を用いて、予測可能性を最適化し、リスクをコントロールする。経験的プロセス制御の実現は、3本の脚に支えられている。

//THE FIRST LEG IS TRANSPARENCY 
//Transparency ensures that aspects of the process that affect the outcome must be visible to those managing the outcomes. Not only must these aspects be transparent, but also what is being seen must be known. That is, when someone inspecting a process believes that something is done; it must be equivalent to their definition of done. 

!!1つ目の脚は透明性
透明性とは、成果に影響するプロセスの様子が、成果を管理する人の目に見えることを保証することである。
また、目に見えるものは知られていなければならない。
つまり、物事の完了とプロセスを検査する人が考える完了の定義は等しくなければならない。

//THE SECOND LEG IS INSPECTION 
//The various aspects of the process must be inspected frequently enough so that unacceptable variances in the process can be detected. The frequency of inspection has to take into consideration that all processes are changed by the act of inspection. A conundrum occurs when the required frequency of inspection exceeds the tolerance to inspection of the process. Fortunately, this doesn’t seem to be true of software development. The other factor is the skill and diligence of the people inspecting the work results. 

!!2つ目の脚は検査
プロセスの様子は、
受け入れ難い変化をすぐ検知できるように、
頻繁に検査しておかなければならない。
ただし、検査によってプロセス自体が変更されてしまうことを考慮に入れておくこと。
必要となる検査の頻度がプロセスの許容を超えてしまってはいけない。
幸いなことに、これはソフトウェア開発には当てはまらないようだ。
他にもプロセスに影響を与える要因としては、作業の成果を検査する人の技術や勤勉さなどがある。

//THE THIRD LEG IS ADAPTATION 
//If the inspector determines from the inspection that one or more aspects of the process are outside acceptable limits, and that the resulting product will be unacceptable, the inspector must adjust the process or the material being processed. The adjustment must be made as quickly as possible to minimize further deviation. 

!!3つ目の脚は適応
検査結果を見て、プロセスに不備があり、成果となるプロダクトを受け入れられないと判断した場合、検査人はプロセスまたは成果物を調整しなければならない。
調整はできるだけ早く行い、これ以上の逸脱は防がなければならない。

//There are three points for inspection and adaptation in Scrum. The Daily Scrum meeting is used to inspect progress toward the Sprint goal, and to make adaptations that optimize the value of the next work day. In addition, the Sprint Review and Planning meetings are used to inspect progress toward the Release Goal and to make adaptations that optimize the value of the next Sprint. Finally, the Sprint Retrospective is used to review the past Sprint and determine what adaptations will make the next Sprint more productive, fulfilling, and enjoyable. 

スクラムには検査と適応を行う場所が3つある。
まず、デイリースクラムミーティングである。
スプリントゴールに対する進捗を検査し、
次の作業日の価値を最適化するように適応する。
次に、スプリントレビューとスプリント計画ミーティングである。
リリースゴールの進捗を検査し、
次のスプリントの価値を最適化するように適応する。
最後に、スプリントレトロスペクティブである。
終了したスプリントを検査し、
次のスプリントをより生産的に、充実した、楽しいものにする
適応方法を決める。

//SCRUM CONTENT 
//The Scrum framework consists of a set of Scrum Teams and their associated roles: Time-Boxes, Artifacts, and Rules. 

!スクラムの内容
スクラムフレームワークは、
'''スクラムチーム'''とその役割、
'''タイムボックス'''、
'''成果物'''、
および'''ルール'''で
構成される。

//Scrum Teams are designed to optimize flexibility and productivity; to this end, they are self-organizing, they are cross-functional, and they work in iterations. Each Scrum Team has three roles: 1) the ScrumMaster, who is responsible for ensuring the process is understood and followed; 2) the Product Owner, who is responsible for maximizing the value of the work that the Scrum Team does; and 3) the Team, which does the work. The Team consists of developers with all the skills to turn the Product Owner’s requirements into a potentially releasable piece of the product by the end of the Sprint. 

スクラムチームは、柔軟性と生産性の最適化を目指すものである。
チームは、自己組織化しており、クロスファンクショナルであり、反復的に作業をする。
スクラムチームには3つの役割がある。
（1）'''スクラムマスター'''（チームがプロセスを理解し、追従することに責任を負う）、
（2）'''プロダクトオーナー'''（スクラムチームの作業の価値を最大にすることに責任を負う）、
（3）'''チーム'''（作業をする）。
チームは、スプリントの終了までに、プロダクトオーナーの要求をリリース判断可能なプロダクトの断片に変えるスキルを持った開発者の集まりである。

//Scrum employs time boxes to create regularity. Elements of Scrum that are timeboxed include the Release Planning Meeting, the Sprint Planning Meeting, the Sprint, the Daily Scrum, the Sprint Review, and the Sprint Retrospective. The heart of Scrum is a Sprint, which is an iteration of one month or less that is of consistent length throughout a development effort. All Sprints use the same Scrum framework, and all Sprints deliver an increment of the final product that is potentially releasable. One Sprint starts immediately after the other. 

スクラムがタイムボックスを採用しているのは、規則的なリズムをつけるためである。
タイムボックスには、
'''リリース計画ミーティング'''、
'''スプリント計画ミーティング'''、
'''スプリント'''、
'''デイリースクラム'''、
'''スプリントレビュー'''、
'''スプリントレトロスペクティブ'''
が含まれる。
スクラムの中心は'''スプリント'''である。
スプリントとは、1ヶ月またはそれ以下のイテレーションで、一連の開発作業が継続する長さとなっている。
すべてのスプリントで同じスクラムフレームワークを使用し、
リリース判断可能な
最終プロダクトのインクリメントを納品する。
スプリント終了直後に次のスプリントを開始する。

//Scrum employs four principal artifacts. The Product Backlog is a prioritized list of everything that might be needed in the product. The Sprint Backlog is a list of tasks to turn the Product Backlog for one Sprint into an increment of potentially shippable product. A burndown is a measure of remaining backlog over time. A Release Burndown measures remaining Product Backlog across the time of a release plan. A Sprint Burndown measures remaining Sprint Backlog items across the time of a Sprint.

スクラムは4つの主要な成果物を採用している。
'''プロダクトバックログ'''は、プロダクトで必要となる可能性のあるものすべてに優先度をつけた一覧である。
'''スプリントバックログ'''は、スプリントにおいて、プロダクトバックログを出荷判断可能なプロダクトのインクリメントに変えるために必要となるタスクに優先度をつけた一覧である。
バーンダウンは、時間をかけて残ったバックログの項目を計測するためのものである。
'''リリースバーンダウン'''は、リリース計画中に残ったプロダクトバックログの項目を計測するためのものだ。
'''スプリントバーンダウン'''は、スプリント中に残ったスプリントバックログの項目を計測するものだ。

//Rules bind together Scrum’s time-boxes, roles, and artifacts. Its rules are described throughout the body of this document. For example, it is a Scrum rule that only Team members ? the people committed to turning the Product Backlog into an increment ? can talk during a Daily Scrum. Ways of implementing Scrum that are not rules but rather are suggestions are described in “Tips” boxes.

'''ルール'''は、
スクラムのタイムボックス、役割、および成果物を結びつけるものである。
ルールについては、本稿の至るところで説明する。
例えば、「チームメンバー（プロダクトバックログをインクリメントに変えることコミットした人たち）だけが、デイリースクラムで話すことができる」などがスクラムのルールである。
スクラムを導入するためのルールではなく、こちらからの提案については、「Tip」枠内で述べることにする。

//Tip: When rules are not stated, the users of Scrum are expected to figure out what to do. Don’t try to figure out a perfect solution, because the problem usually changes quickly. Instead, try something and see how it works. The inspect-and-adapt mechanisms of Scrum’s empirical nature will guide you. 

""Tip: ルールが設定されない場合は、スクラムのユーザーは自ら何を行うべきかを考えなければならない。問題は頻繁に変更されるので、最初から完全な解を見つけようとはしないこと。その代わり、何かを試してみて、その効果を確かめること。検査と適応という仕組みは、経験的に何かを獲得していくというスクラムの特性であり、あなたを導いてくれることだろう。

//SCRUM ROLES 
//The Scrum Team consists of the ScrumMaster, the Product Owner, and the Team. Scrum Team members are called “pigs.” Everyone else is a “chicken.” Chickens cannot tell “pigs” how to do their work. Chickens and pigs come from the story, 
!スクラムに登場する役割
スクラムチームは、
'''スクラムマスター'''、
'''プロダクトオーナー'''、
および'''チーム'''で構成される。
スクラムチームのメンバーは「豚」と呼ばれる。
その他の人はすべて「鶏」である。
鶏は「豚」に作業のやり方を命令することはできない。
鶏と豚とは、次のような物語に由来する。

//“A chicken and a pig are together when the chicken says, “Let’s start a restaurant!” 
//The pig thinks it over and says, “What would we call this restaurant?” 
//The chicken says, “Ham n’ Eggs!” 
//The pig says, “No thanks, I’d be committed, but you’d only be involved!” 

* あるとき鶏と豚が一緒にいた。鶏が「レストランを始めよう！」と言い出した。
* 豚はよく考えてからこう尋ねた。「レストランでは何を出すんだい？」
* 鶏は「ハムエッグだよ！」と答えた。
* 豚は言った。「それはやめておこうかな。私は身を削るのに、君はちょっと関わってるだけじゃないか」

//Tip: The ScrumMaster works with the customers and management to identify and instantiate a Product Owner. The ScrumMaster teaches the Product Owner how to do his or her job. Product Owners are expected to know how to manage to optimize value using Scrum. If they don’t, we hold the ScrumMaster accountable. 

""Tip: スクラムマスターは、顧客やマネージャーと一緒にプロダクトオーナーを具体的に特定する。そして、プロダクトオーナーにその役割を教える。プロダクトオーナーは、スクラムを使用する価値を最適化するための管理方法を知っておかなければならない。プロダクトオーナーが知らない場合は、スクラムマスターがその責任を負う。

//THE SCRUMMASTER 
//The ScrumMaster is responsible for ensuring that the Scrum Team adheres to Scrum values, practices, and rules. The ScrumMaster helps the Scrum Team and the organization adopt Scrum. The ScrumMaster teaches the Scrum Team by coaching and by leading it to be more productive and produce higher quality products. The ScrumMaster helps the Scrum Team understand and use self-management and cross-functionality. However, the ScrumMaster does not manage the Scrum Team; the Scrum Team is self-organizing. 


!!スクラムマスター
スクラムマスターは、スクラムチームがスクラムの価値、慣習、およびルールに忠実であることを保証する責任がある。
スクラムマスターは、スクラムチームと組織がスクラムを採用することを支援する。
スクラムマスターは、コーチングやリーディングを使って、スクラムチームがより生産的に、より質の高いプロダクトを作れるよう指導する。
スクラムマスターは、スクラムチームが自己管理とクロスファンクションを理解し、実践することを支援する。
ただし、スクラムマスターがスクラムチームを管理することはない。
スクラムチームは自己組織なのである。


//Tip: The ScrumMaster may be a member of the Team; for example, a developer performing Sprint tasks. However, this often leads to conflicts when the ScrumMaster has to choose between removing impediments and performing tasks. The ScrumMaster should never be the Product Owner.


""Tip: スクラムマスターは、スプリントのタスクを行う開発者などのチームメンバーが兼任することもある。しかし、障害の除去かタスクの消化かのいずれかを選ばなければならない場合には、矛盾につながる。なお、スクラムマスターはプロダクトオーナーが兼任してはならない。


//THE PRODUCT OWNER 
//The Product Owner is the one and only person responsible for managing the Product Backlog and ensuring the value of the work the Team performs. This person maintains the Product Backlog and ensures that it is visible to everyone. Everyone knows what items have the highest priority, so everyone knows what will be worked on. The Product Owner is one person, not a committee. Committees may exist that advise or influence this person, but people who want to change an item’s priority have to convince the Product Owner. Companies that adopt Scrum may find it that influences their methods for setting priorities and requirements over time. 

!!プロダクトオーナー
プロダクトオーナーは、プロダクトバックログの管理に責任を持ち、チームの作業の価値を保証する唯一の人物である。
プロダクトオーナーは、プロダクトバックログを維持し、みんなに確実に見えるようにする。どれが最優先項目なのかを知らせ、何に取り組めばよいのかが分かるようにする。
プロダクトオーナーは1人の人間であり、委員会であってはならない。
助言したり影響を与えたりする委員会があってもよいが、項目の優先度を変更したい人はプロダクトオーナーを納得させなければならない。
スクラムを導入する会社は、自社のこれまでの優先順位付けや要求の決め方に影響を受けるかもしれない。


//Tip: For commercial development, the Product Owner may be the product manager.For in-house development efforts, the Product Owner could be the manager of the business function that is being automated. 


""Tip: 商用開発の場合、プロダクトオーナーはプロダクトマネージャーになるだろう。社内開発の場合は、自動的にビジネス側のマネージャーになるだろう。


//For the Product Owner to succeed, everyone in the organization has to respect his or her decisions. No one is allowed to tell the Team to work from a different set of priorities, and Teams aren’t allowed to listen to anyone who says otherwise. The Product Owner’s decisions are visible in the content and prioritization of the Product Backlog. This visibility requires the Product Owner to do his or her best, and it makes the role of Product Owner both a demanding and a rewarding one.


プロダクトオーナーが成功するには、組織のみんながプロダクトオーナーの決定を尊重しなければならない。
優先度の異なる作業をチームに命じることは他の誰にも認められておらず、
チームにも、異なることを言う人の意見を聞くことは許されていない。
プロダクトオーナーの決定は、プロダクトバックログの内容と優先度で見ることができる。
この見える化はプロダクトオーナーの努力にかかっており、そのためプロダクトオーナーの役割は困難だが、やり甲斐のあるものとなっている。

//Tip: The Product Owner can be a Team member, also doing development work. Thisadditional responsibility may cut into the Product Owner’s ability to work with stakeholders. However, the Product Owner can never be the ScrumMaster. 

""Tip: プロダクトオーナーはチームメンバーが担当してもよい。開発業務を行っても構わない。しかし、責任が増えることによって、ステークホルダーと作業をするプロダクトオーナーの能力が下がってしまうかもしれない。なお、プロダクトオーナーはスクラムマスターであってはならない。

//THE TEAM 
//Teams of developers turn Product Backlog into increments of potentially shippable functionality every Sprint. Teams are also cross-functional; Team members must have all of the skills necessary to create an increment of work. Team members often have specialized skills, such as programming, quality control, business analysis, architecture, user interface design, or database design. However, the skills that Team member share ? that is, the skill of addressing a requirement and turning it into a usable product ? tend to be more important than the ones that they do not. People who refuse to code because they are architects or designers are not good fits for Teams. Everyone chips in, even if that requires learning new skills or remembering old ones. There are no titles on Teams, and there are no exceptions to this rule. Teams do not contain sub-Teams dedicated to particular domains like testing or business analysis, either. 

!!チーム
開発者の集まりであるチームは、プロダクトバックログをスプリントごとに出荷判断可能な機能のインクリメントに変える。
さらに、チームはクロスファンクショナルである。つまり、チームメンバーは、インクリメントを作成するのに必要なスキルをすべて持っていなければならない。
チームメンバーは、プログラミング、品質管理、経営分析、アーキテクチャ、ユーザーインターフェース設計、あるいはデータベース設計のような特化したスキルを持っている。
しかし、チームメンバーが共有するスキル――つまり、要求を見出し、それを利用可能なプロダクトに変える技術――のほうが重要である場合が多い。
アーキテクトや設計者だからとコーディングを断るような人はチームにふさわしくない。
新しいスキルを学んだり古いスキルを思い出したりする必要があっても、みんなが力を貸すこと。
チーム内に肩書きはない。また、このルールに例外はない。
チームには、テストやビジネス分析といったドメインに専念するサブチームは存在しない。

//Teams are also self-organizing. No one ? not even the ScrumMaster ? tells the Team how to turn Product Backlog into increments of shippable functionality. The Team figures this out on its own. Each Team member applies his or her expertise to all of the problems. The synergy that results improves the entire Team’s overall efficiency and effectiveness.

さらに、チームは自己組織である。
誰も――スクラムマスターでさえも――プロダクトバックログを出荷可能な機能のインクリメントに変える方法をチームに伝えることはない。
チームは単独でこれを解決する。
チームメンバーは専門知識をすべての問題に適用する。
その結果生じるシナジーによって、チーム全体の効率と効果が向上する。

//The optimal size for a Team is seven people, plus or minus two. When there are fewer than five Team members, there is less interaction and as a result less productivity gain.  What’s more, the Team may encounter skill constraints during parts of the Sprint and be unable to deliver a releasable piece of the product. If there are more than nine members, there is simply too much coordination required. Large Teams generate too much complexity for an empirical processs to manage. However, we have encountered some successful Teams that have exceeded the upper and lower bounds of this size range. The Product Owner and ScrumMaster roles are not included in this count unless they are also pigs. 


チームに最適な規模は、7±2名である。
チームメンバーが5名未満の場合、相互作用が少なく、生産性の上昇が低い。
さらに、スプリント中に技術的制約に遭遇したり、リリース可能なプロダクトを納品できなかったりするかもしれない。
チームメンバーが9名を超える場合、単純に調整する量が多くなってしまう。
大きなチームは、経験的プロセスを管理するにはあまりにも複雑である。
とはいえ、この範囲に入らない規模のチームが成功した例に我々は何度か遭遇したことがある。
プロダクトオーナーとスクラムマスターは、彼らが豚でないのであれば、人数に含まない。

//Team composition may change at the end of a Sprint. Every time Team membership is changed, the productivity gained from self-organization is diminished. Care should be taken when changing Team composition. 


スプリントが終了すると、チーム構成が変わることもある。
チームメンバーが替わるたびに自己組織によって獲得した生産性は低下する。
チーム構成を変更するときは注意すべきである。

//TIME-BOXES 
//The Time-Boxes in Scrum are the Release Planning Meeting, the Sprint, the Sprint Planning Meeting, the Sprint Review, the Sprint Retrospective, and the Daily Scrum. 

!タイムボックス
スクラムのタイムボックスには、
'''リリース計画ミーティング'''、
'''スプリント'''、
'''スプリント計画ミーティング'''、
'''スプリントレビュー'''、
'''スプリントレトロスペクティブ'''、
および'''デイリースクラム'''
がある。


//RELEASE PLANNING MEETING 
//The purpose of release planning is to establish a plan and goals that the Scrum Teams and the rest of the organizations can understand and communicate. Release planning answers the questions, “How can we turn the vision into a winning product in the best possible way? How can we meet or exceed the desired customer satisfaction and Return on Investment?” The release plan establishes the goal of the release, the highest priority Product Backlog, the major risks, and the overall features and functionality that the release will contain. It also establishes a probable delivery date and cost that should hold if nothing changes. The organization can then inspect progress and make changes to this release plan on a Sprint-by-Sprint basis. 

!!リリース計画ミーティング
リリース計画ミーティングの目的は、スクラムチームや組織全体が、理解した上でコミュニケーションできる計画やゴールを確立することである。
リリース計画は
「
どのようにすれば最良の方法でビジョンを成功プロダクトに変えることができるのか。
どのようにすれば求められる顧客満足やROIを満たす（あるいは超える）ことができるのか。
」
といった疑問に答えるものである。
リリース計画では、リリースゴール、プロダクトバックログの最優先項目、主なリスク、全般的なフィーチャ、およびリリースに含む機能を決める。
さらに、納品予定日、何も変更が発生しなかった場合にかかるコストも決めておく。
組織は進捗を検査して、スプリントごとにリリース計画を変更できる。


//Products are built iteratively using Scrum, wherein each Sprint creates an increment of the product, starting with the most valuable and riskiest. More and more Sprints create additional increments of the product. Each increment is a potentially shippable slice of the entire product. When enough increments have been created for the Product to be of value, of use to its investors, the product is released. 

スクラムを使用してプロダクトを反復的に構築するには、スプリントでプロダクトのインクリメントを作成することになる。
このとき、最も価値があり、最もリスクの高いものから着手する。
スプリントのたびに、プロダクトのインクリメントが追加される。
インクリメントは、プロダクトの出荷判断可能な断片である。
十分にインクリメントを作成し、出資者にとって価値のある役立つものとなったら、プロダクトをリリースする。

//Most organizations already have a release planning process, and in most of these processes most of the planning is done at the beginning of the release and left unchanged as time passes. In Scrum release planning, an overall goal and probable outcomes are defined. This release planning usually requires no more than 15-20% of the time an organization consumed to build a traditional release plan. However, a Scrum release performs just-in-time planning every Sprint Review and Sprint Planning meeting, as well as daily just-in-time planning at every Daily Scrum meeting. Overall, Scrum release efforts probably consume slightly more effort than traditional release planning efforts.

ほとんどの組織には、既にリリース計画プロセスが存在するだろう。
しかし多くの場合、その計画はリリースの初期に行い、時間がたっても変更することはない。
スクラムリリース計画では、全体のゴールや成果物を定義する。
通常、このリリース計画には、従来のリリース計画に費やすわずか15〜20%の時間しかかからない。
ただし、スクラムのリリースは、スプリントレビューやスプリント計画ミーティングのたびにジャストインタイムで計画を立てる。
さらに、デイリースクラムミーティングでは、毎日ジャストインタイムで計画を立てる。
合計すると、スクラムのリリースへの取り組みは、おそらく伝統的なリリース計画への取り組みよりも、わずかに手間がかかることになる。

//Release planning requires estimating and prioritizing the Product Backlog for the Release. There are many techniques for doing so that lie outside the purview of Scrum but are nonetheless useful when used with it. 

リリース計画では、リリースに向けてプロダクトバックログを見積もり、優先度付けをしなければならない。
そのために有効なテクニックはスクラム以外にも数多くあり、それらを使うことも有用である。

//THE SPRINT 
//A Sprint is an iteration. Sprints are time-boxed. During the Sprint, the ScrumMaster ensures that no changes are made that would affect the Sprint Goal. Both Team composition and quality goals remain constant throughout the Sprint. Sprints contain and consist of the Sprint Planning meeting, the development work, the Sprint Review, and the Sprint Retrospective. Sprints occur one after another, with no time in between Sprints. 


!!スプリント
スプリントは1つのイテレーションである。
スプリントはタイムボックスになっている。
スクラムマスターは、スプリント中にスプリントゴールに影響する変更が行われないことを保証する。
チーム構成と品質目標は、どちらもスプリント中は一定である。
スプリントは、スプリント計画ミーティング、開発作業、スプリントレビュー、およびスプリントレトロスペクティブで含んでおり、それらで構成されている。
スプリントは間隔を置かずに次々と開始する。

//A project is used to accomplish something; in software development, it is used to build a product or system. Every project consists of a definition of what is to be built, a plan to build it, the work done according to the plan, and the resultant product. Every project has a horizon, which is to say the time frame for which the plan is good. If the horizon is too long, the definition may have changed, too many variables may have entered in, the risk may be too great, etc. Scrum is a framework for a project whose horizon is no more than one month long, where there is enough complexity that a longer horizon is too risky. The predictability of the project has to be controlled at least each month, and the risk that the project may go out of control or become unpredictable is contained at least each month. 

プロジェクトとは、何かを達成するために使用するものだ。
ソフトウェア開発では、プロダクトまたはシステムを構築するために使用する。
すべてのプロジェクトは、構築するものの定義、構築する計画、計画に沿って行う作業、および最終プロダクトで構成される。
すべてのプロジェクトには地平線がある。
つまり、計画に適した時間枠である。
地平線が遠すぎると、定義が変わったり、様々な変数が入ってきたり、リスクが大きくなりすぎたりする。
スクラムは、最大1ヶ月のプロジェクトのためのフレームワークである。
これでも十分に複雑であり、これ以上長くなるとリスクが高い。
プロジェクトの予測可能性は、少なくとも月次でコントロールしなければならない。
コントロール不能や予測不能のリスクは、少なくとも月次で抑えるようにしなければならない。

//Tip: If the Team senses that it has overcommitted, it meets with the Product Owner to removeor reduce the scope of Product Backlog selected for the Sprint. If the Team senses that it may have extra time, it can work with the Product Owner to select additional Product Backlog. 

""Tip: チームが作業が多すぎることに気づいたときは、プロダクトオーナーに会って、スプリントに選んだプロダクトバックログのスコープを削除したり縮小したりしてもらうこと。逆に時間が余ることに気づいたときは、プロダクトオーナーと追加するバックログを選ぶこと。

//Tip: When a Team begins Scrum, two-week Sprints allow it to learn without wallowing in uncertainty. Sprints of this length can be synchronized with other Teams by adding two increments together. 

""Tip: チームがスクラムを始めるときは、不確実なことに惑わされない学習期間を2週間とるとよい。2週間のスプリントであれば、インクリメントを2つ合わせることで、他のチームと同期をとることもできる。

//Sprints can be cancelled before the Sprint time box is over. Only the Product Owner has the authority to cancel the Sprint, although he or she may do so under influence from the stakeholders, the Team, or the ScrumMaster. Under what kind of circumstances might a Sprint need to be cancelled? Management may need to cancel a Sprint if the Sprint Goal becomes obsolete. This could occur if the company changes direction or if market or technology conditions change. In general, a Sprint should be cancelled if it no longer makes sense given the circumstances. However, because of the short duration of Sprints, it rarely makes sense to do so. 

スプリントはタイムボックスが終わる前に中止できる。
プロダクトオーナーだけがスプリントを中止する権限を持つ。
このとき、ステークホルダー、チーム、あるいはスクラムマスターの意見を聞いてもよい。
それでは、スプリントが中止されるのはどんな状況だろうか？
スプリントゴールが古くなった場合には、マネジメントがスプリントを中止するかもしれない。
会社の方向性が変わったり、市場や技術の状況が変わったりする場合にも、中止する必要があるかもしれない。
一般的に、つじつまが合わない状況になったら、スプリントを中止したほうがよい。
しかし、スプリントの期間は短く、中止したからといってそれほど意味をなすことはないだろう。

//When a Sprint is cancelled, any completed and “done” Product Backlog items are reviewed. They are accepted if they represent a potentially shippable increment. All other Product Backlog items are put back on the Product Backlog with their initial estimates. Any work done on them is assumed to be lost. Sprint terminations consume resources, since everyone has to regroup in another Sprint planning meeting to start another Sprint. Sprint terminations are often traumatic to the Team, and they are very uncommon.

スプリントが中止になったら、プロダクトバックログの完成あるいは「完了（done）」した項目をレビューする。
出荷判断可能なインクリメントになっていれば、受け入れられる。
その他の項目は、最初の見積もり数値のままプロダクトバックログに戻される。
それらにかかった作業は失われたものとなる。
スプリントの中止は、別のスプリントを開始するためにスプリント計画ミーティングを開かなければならないため、リソースを消費する。
スプリントの中止はチームにとってトラウマになることが多い。
しかし、中止はめったに起きないことである。

//SPRINT PLANNING MEETING 
//The Sprint Planning meeting is when the iteration is planned. It is time-boxed to eight hours for a one month Sprint. For shorter Sprints, allocate approximately 5% of the total Sprint length to this meeting and consists of two parts. The first part, a four hour time-box, is when what will be done in the Sprint is decided upon. The second part, another four-hour time box, is when the Team figures out how it is going to build this functionality into a product increment during the Sprint. 


!!スプリント計画ミーティング
スプリント計画ミーティングでは、イテレーションを計画する。
1ヶ月のスプリントの場合、ミーティングは8時間のタイムボックスとなる。
もっと短いスプリントの場合は、スプリントの長さのおよそ5%を割り当てる。
ミーティングは2部構成である。
最初の部分（4時間のタイムボックス）では、スプリントで行うことを決める。
第2の部分（また別の4時間のタイムボックス）では、決まった機能をプロダクトインクリメントにどのように組み込むかをチームで考える。

//There are two parts to the Sprint Planning Meeting: the “What?” part and the “How?” part. Some Scrum Teams combine the two. In the first part, the Scrum Team addresses the question of “What?” Here, the Product Owner presents the top priority Product Backlog to the Team. They work together to figure out what functionality is to be developed during the next Sprint. The input to this meeting is the Product Backlog, the latest increment of product, the capacity of the Team, and past performance of the Team. The amount of backlog the Team selects is solely up to the Team. Only the Team can assess what it can accomplish over the upcoming Sprint.

スプリント計画ミーティングは2部構成である：「What?」部と「How?」部だ。
なかには、この2つを一緒に行うスクラムチームもある。
最初の部分では、スクラムチームは「What?」の質問に取り組む。
プロダクトオーナーは、プロダクトバックログの最優先項目をチームに提示する。
ここで一緒に次のスプリントで開発する機能を考える。
ミーティングへのインプットは、プロダクトバックログ、プロダクトの最新インクリメント、チームの許容量、およびチームの過去の実績である。
バックログの量はチームの責任で選択する。
次のスプリントで遂行できるかどうかを判断できるのはチームだけである。

//Having selected the Product Backlog, a Sprint Goal is crafted. The Sprint Goal is an objective that will be met through the implementation of the Product Backlog. This is a statement that provides guidance to the Team on why it is building the increment. The Sprint Goal is a subset of the release goal. 

プロダクトバックログを選択したら、スプリントゴールを丹念に設定する。
スプリントゴールはプロダクトバックログを導入することで満たす目的である。
これは、チームがインクリメントを構築する理由のガイドとなるステートメントである。
スプリントゴールはリリースゴールの部分集合である。

//The reason for having a Sprint Goal is to give the Team some wiggle room regarding the functionality. For example, the goal for the above Sprint could also be: “Automate the client account modification functionality through a secure, recoverable transaction middleware capability.” As the Team works, it keeps this goal in mind. In order to satisfy the goal, it implements the functionality and technology. If the work turns out to be harder than the Team had expected, then the Team collaborates with the Product Owner and only partially implement the functionality. 

スプリントゴールを設定するのは、チームが自由に機能を扱えるようにするためである。
例えば、上記のスプリントのゴールは次のような感じになる：
「
安全で復元可能なトランザクションミドルウェアを使って、
クライアントアカウントの修正機能を自動化する
」
チームが作業をする上で、このゴールを覚えておく。
ゴールを満たすために、チームは機能と技術を実装する。
予測したよりも作業が困難であると判明した場合、
チームはプロダクトオーナーと相談して、一部の機能を実装する。

//In the second part of the Sprint Planning Meeting, the Team addresses the question of “How?” During the second four hours of the Sprint Planning Meeting, the Team figures out how it will turn the Product Backlog selected during Sprint Planning Meeting (What) into a done increment. The Team usually starts by designing the work. While designing, the Team identifies tasks. These tasks are the detailed pieces of work needed to convert the Product Backlog into working software. Tasks should have decomposed so they can be done in less than one day. This task list is called the Sprint Backlog. The Team self-organizes to assign and undertake the work in the Sprint Backlog, either during the Sprint Planning meeting or just-in-time during the Sprint. 

スプリント計画ミーティングの第2部では、チームは「How?」の質問に取り組む。
この新たな4時間でチームは、スプリント計画ミーティング（What）で選択したプロダクトバックログをどのように完了インクリメントに変えるかを考える。
通常、チームは、作業の設計から始める。そして、タスクを見つけ出す。
これらのタスクは、プロダクトバックログを動くソフトウェアに変えために必要となる詳細な作業である。
タスクは、1日未満で行うことができるように分解すべきだ。
タスク一覧はスプリントバックログと呼ばれる。
チームは自己組織化し、スプリント計画ミーティングまたはスプリント中にジャストインタイムで、スプリントバックログの作業を請け持つ。

//Tip: Usually, only 60-70% of the total Sprint Backlog will be devised in the Sprint Planning meeting. The rest are stubbed out for later detailing, or given large estimates that will be decomposed later in the Sprint.

""Tip: 通常、スプリント計画ミーティングでは、スプリントバックログの60〜70%しか出てこないだろう。残りはあとで対応する。あるいは、とりあえず大きな見積もりをしておいて、あとで分解する。

//The Product Owner is present during the second part of the Sprint Planning Meeting to clarify the Product Backlog and to help make trade-offs. If the Team determines that it has too much or too little work, it may renegotiate the Product Backlog with the Product Owner. The Team may also invite other people to attend in order to provide technical or domain advice. A new Team often first realizes that it will either sink or swim as a Team, not individually, in this meeting. The Team realizes that it must rely on itself. As it realizes this, it starts to self-organize to take on the characteristics and behavior of a real Team. 

スプリント計画ミーティングの第2部では、プロダクトオーナーはプロダクトバックログを明確にし、トレードオフを支援する。
作業が多すぎたり少なすぎたりした場合は、チームはプロダクトオーナーと交渉して、プロダクトバックログを調整する。
技術やドメインのアドバイスを求めるために、チームは他の人をミーティングに招待するかもしれない。
新しいチームの場合、チームとしてうまくやっていけるかどうかは、このミーティングで分かる。
チームはチームを頼らなければならないことに気づく。
これに気づけば、チームは自己組織を始め、真のチームとしての特性を持ち、そのように振る舞えるようになる。

//SPRINT REVIEW 
//At the end of the Sprint, a Sprint Review meeting is held. This is a four hour time-boxed meeting for one month Sprints. For Sprints of lesser duration, this meeting must not consume more than 5% of the total Sprint. During the Sprint Review, the Scrum Team and stakeholders collaborate about what was just done. Based on that and changes to the Product Backlog during the Sprint, they collaborate about what are the next things that could be done. This is an informal meeting, with the presentation of the functionality intended to foster collaboration about what to do next. 

!!スプリントレビュー
スプリントの最後にスプリントレビューを開く。
1ヶ月のスプリントの場合、タイムボックスは4時間となる。
もっと短いスプリントの場合、スプリントの5%以上を費やしてはならない。
スプリントレビューでは、スクラムチームとステークホルダーが、完了した項目について協議する。
この結果とスプリント中のプロダクトバックログへの変更に基づいて、次に完了すべきことを協議する。
これは非公式のミーティングであり、
機能のプレゼンテーションなどを行って、
次に行うことの協働を促進する。

//The meeting includes at least the following elements. The Product Owner identifies what has been done and what hasn’t been done. The Team discusses what went well during the Sprint and what problems it ran into, and how it solved these problems. The Team then demonstrates the work that is done and answers questions. The Product Owner then discusses the Product Backlog as it stands. He or she projects likely completion dates with various velocity assumptions. The entire group then collaborates about what it has seen and what this means regarding what to do next. The Sprint Review provides valuable input to subsequent Sprint Planning meeting. 

このミーティングには、少なくとも次の要素が含まれている。
プロダクトオーナーは、何が完了したか、何が完了しなかったかを識別する。
チームは、スプリント中にうまくいったこと、遭遇した問題点、およびどうやって問題を解決したかを議論する。
その後チームは、完了した作業のデモンストレーションを行い、質問に答える。
プロダクトオーナーは、現状のプロダクトバックログについて話しあう。
そして、様々なベロシティを仮定して、有望な完成日を予測する。
その後みんなで、これまで見たこと、そしてそれが次に行うべきことにどんな意味があるかを議論する。
スプリントレビューは、後のスプリント計画ミーティングにとって価値のあるインプットとなる。

//SPRINT RETROSPECTIVE 
//After the Sprint Review and prior to the next Sprint Planning meeting, the Scrum Team has a Sprint Retrospective meeting. At this three hour, time-boxed meeting the ScrumMaster encourages the Scrum Team to revise, within the Scrum process framework and practices, their development process to make it more effective and enjoyable for the next Sprint. Many books document techniques that are helpful to use in Retrospectives. 


!!スプリントレトロスペクティブ
スプリントレビューと次のスプリント計画ミーティングの間に、
スクラムチームはスプリントレトロスペクティブを開く。
スクラムマスターは、この3時間のタイムボックスのミーティングで、次のスプリントがより有効で、より愉快にするために、スクラムプロセスフレームワークとプラクティスでチームが開発プロセスを改善するように促す。
レトロスペクティブで使用するのに有用な技術が、多くの書籍で述べられている。

//The purpose of the Retrospective is to inspect how the last Sprint went in regards to people, relationships, process and tools. The inspection should identify and prioritize the major items that went well and those items that-if done differently-could make things even better. These include Scrum Team composition, meeting arrangements, tools, definition of “done,” methods of communication, and processes for turning Product Backlog items into something “done.” By the end of the Sprint Retrospective, the Scrum Team should have identified actionable improvement measures that it implements in the next Sprint. These changes become the adaptation to the empirical inspection.


レトロスペクティブの目的は、先のスプリントを人々、関係、プロセス、ツールの面から検査することである。
検査は、うまくいった主要な項目と、違ったやり方をすればもっと良くなったかもしれない項目を識別して優先付けをすべきである。
ここには、スクラムチームの構成、ミーティング規約、ツール、「完了」の定義、コミュニケーションの方法、およびプロダクトバックログの項目を「完了」に変えるプロセスが含まれる。
スプリントレトロスペクティブの終了までに、スクラムチームは、次のスプリントで導入できる実行可能な改善を特定すべきだ。
こうした改善が経験的な検査への適応となる。

//DAILY SCRUM 
//Each Team meets daily for a 15-minute status meeting called the Daily Scrum. The Daily Scrum is at the same time and same place throughout the Sprints. During the meeting, each Team member explains: 

!!デイリースクラム
チームは、デイリースクラムと呼ばれる15分のステータスミーティングで毎日顔を合わせる。スプリント中のデイリースクラムは、同じ時間、同じ場所で開かれる。
チームメンバーは次のことを説明する:

//What he or she has accomplished since the last meeting; 
//What he or she is going to do before the next meeting; and 
//What obstacles are in his or her way. 


* 前のミーティングから今日までに行ったこと
* 次のミーティングまでに行うこと
* 何かを行う上で障害となること

//Daily Scrums improve communications, eliminate other meetings, identify and remove impediments to development, highlight and promote quick decision-making, and improve everyone’s level of project knowledge. 

デイリースクラムは、コミュニケーションを改善し、その他のミーティングを除去し、開発の障害を特定して排除し、迅速な意志決定を強調して促進し、みんなのプロジェクト知識のレベルを向上するものである。

//The ScrumMaster ensures that the Team has the meeting. The Team is responsible for conducting the Daily Scrum. The ScrumMaster teaches the Team to keep the Daily Scrum short by enforcing the rules and making sure that people speak briefly. The ScrumMaster also enforces the rule that chickens are not allowed to talk or in anyway interfere with the Daily Scrum. 

スクラムマスターは、チームが確実にミーティングを開くようにする。
チームは、デイリースクラムを行うことに責任を負う。
スクラムマスターは「簡潔に話す」というルールを実施し、デイリースクラムが短くなるようにチームに伝える。
さらにスクラムマスターは、「デイリースクラムでは、鶏は話すことを許されない。どのような方法でも口出しは許されない」というルールも実施する。

//The Daily Scrum is not a status meeting. It is not for anyone but the people transforming the Product Backlog items into an increment (the Team). The Team has committed to a Sprint Goal, and to these Product Backlog items. The Daily Scrum is an inspection of the progress toward that Sprint Goal (the three questions). Follow-on meetings usually occur to make adaptations to the upcoming work in the Sprint. The intent is to optimize the probability that the Team will meet its Goal. This is a key inspect and adapt meeting in the Scrum empirical process. 

デイリースクラムは進捗報告会議ではない。
プロダクトバックログの項目をインクリメントに変える人々（すなわちチーム）以外のためのものではないのだ。
チームは、スプリントゴールとプロダクトバックログの項目にコミットする。
デイリースクラムは、スプリントゴールに向けた進捗の検査である（3つの質問）。
通常、スプリントで行う作業に適応するためのミーティングをこの次に開く。
チームがゴールを達成する見込みを最適化するためである。
これが、スクラムの経験的プロセスにおけるカギとなる検査と適応のミーティングである。

//SCRUM ARTIFACTS 
//Scrum Artifacts include the Product Backlog, the Release Burndown, the Sprint Backlog, and the Sprint Burndown. 

!スクラムの成果物
スクラムの成果物は、
'''プロダクトバックログ'''、
'''リリースバーンダウン'''、
'''スプリントバックログ'''、
および'''スプリントバーンダウン'''
である。

//PRODUCT BACKLOG AND RELEASE BURNDOWN 
//The requirements for the product that the Team(s) is developing are listed in the Product Backlog. The Product Owner is responsible for the Product Backlog, its contents, its availability, and its prioritization. Product Backlog is never complete. The initial cut at developing it only lays out the initially known and best-understood requirements. The Product Backlog evolves as the product and the environment in which it will be used evolves. The Backlog is dynamic in that it constantly changes to identify what the product needs to be appropriate, competitive, and useful. As long as a product exists, Product Backlog also exists. 

!!プロダクトバックログとリリースバーンダウン
チームが開発しているプロダクトへの要求はプロダクトバックログに一覧されている。
プロダクトオーナーは、プロダクトバックログ、その内容、利用可能性、および優先度に責任を負う。
プロダクトバックログは永遠に完成しない。
最初に着手するときは、よく知られて、よく理解されている要求だけが並べられている。
プロダクトバックログは、プロダクトや環境に合わせて進化する。
プロダクトが適切で、競争力のある、有用なものになるには何が必要かを特定するために、バックログは絶えず変化しなければならない動的なものである。
プロダクトが存在する限り、プロダクトバックログも存在する。

//The Product Backlog represents everything necessary to develop and launch a successful product. It is a list of all features, functions, technologies, enhancements, and bug fixes that constitute the changes that will be made to the product for future releases. Product Backlog items have the attributes of a description, priority, and estimate. Priority is driven by risk, value, and necessity. There are many techniques for assessing these attributes.


プロダクトバックログには、成功するプロダクトを開発し、ローンチするために必要なものをすべてを表されている。
すべてのフィーチャ、機能、技術、要望、およびバグフィックスなど、将来のリリースでプロダクトに加えられる変更の一覧となっている。
プロダクトバックログの項目には、詳細、優先度、見積もりの属性がある。
優先度は、リスク、価値、および必要性を考慮して決定する。
こうした属性を算定するための技術が数多くある。

//Tip: Product Backlog items are usually stated as User Stories. Use Cases are appropriate as well, but they are better for use in developing life- or mission- critical software. 

""Tip: 通常、プロダクトバックログの項目は、ユーザーストーリーで記述する。ユースケースの使用も適切だが、それは生命に関するソフトウェアや基幹ソフトウェアに使用するとよい。

//Product Backlog is sorted in order of priority. Top priority Product Backlog drives immediate development activities. The higher the priority, the more urgent it is, the more it has been thought about, and the more consensus there is regarding its value. Higher priority backlog is clearer and has more detailed information than lower priority backlog. Better estimates are made based on the greater clarity and increased detail. The lower the priority, the less the detail, until you can barely make out the item. 

プロダクトバックログは優先度でソートする。
優先度の高いプロダクトバックログはすぐ開発に入ることができる。
優先度が高いほど、緊急度が高いほど、より考えられたものほど、より多くの同意が得られたものほど、価値があると判断する。
優先度の高いバックログには、優先度の低いバックログよりも明確で、情報の記述が多い。
より良い見積もりとは、明確さと情報の多さで決められる。
項目の記述ができるようになるまで、優先度は低く、情報は少ないままである。

//As a product is used, as its value increases, and as the marketplace provides feedback, the product’s backlog emerges into a larger and more exhaustive list. Requirements never stop changing. Product Backlog is a living document. Changes in business requirements, market conditions, technology, and staffing cause changes in the Product Backlog. To minimize rework, only the highest priority items need to be detailed out. The Product Backlog items that will occupy the Teams for the upcoming several Sprints are fine-grained, having been decomposed so that any one item can be done within the duration of the Sprint. 

プロダクトが使用され、価値が増加し、市場がフィードバックを提供するようになると、プロダクトバックログは大きくて網羅的な一覧に変わる。
要求の変化はとどまることを知らない。
プロダクトバックログは生きたドキュメントなのだ。
ビジネス要求、市場、技術、および人材の変化は、プロダクトバックログの変化を引き起こす。
手戻りを最小化するには、最優先項目だけを記述しなければならない。
次のスプリントでチームが携わるプロダクトバックログの項目は、スプリント期間内に完了するよう分解されており、程よい粒度になっている。

//Tip: Scrum Teams often spend 10% of each Sprint grooming the product backlog to meet the above definition of the Product Backlog. When groomed to this level of granularity, the Product Backlog items at the top of the Product Backlog (highest priority, greatest value) are decomposed so they fit within one Sprint. They have been analyzed and thought through during the grooming process. When the Sprint Planning meeting occurs, these top priority Product Backlog items are well understood and easily selected. 

""Tip: 通常、スクラムチームは、スプリントの10%の時間を使ってプロダクトバックログを上記の定義に合うように調整する。程よい粒度になったら、プロダクトバックログの最上位にある項目（優先度が最も高く、価値が最も高い項目）を、1つのスプリントに入るように分解する。この調整プロセスで、項目を分析し、吟味する。スプリント計画ミーティングでは、これらの最優先項目は十分に理解されており、簡単に選ぶことができる。

//Multiple Scrum Teams often work together on the same product. One Product Backlog is used to describe the upcoming work on the Product. A Product Backlog attribute that groups items is then employed. Grouping can occur by feature set, technology, or architecture, and it is often used as a way to organize work by Scrum Team. 

複数のスクラムチームが同じプロダクトに取り組むことがよくある。
この場合も、1つのプロダクトバックログで、これから手がけるプロダクトの作業を記述する。
このとき、プロダクトバックログの項目をグループ化する属性を採用する。
グループ化には、フィーチャセット、技術、あるいはアーキテクチャを使い、スクラムチームの作業を整理する。

//Tip: Acceptance tests are often used as another Product Backlog item attribute. They can often supplant more detailed text descriptions with a testable description of what the Product Backlog item must do when completed. 

""Tip: 受入テストもプロダクトバックログの項目の属性としてよく使用する。これは、プロダクトバックログの項目が完成したときに行わなければならないテスト可能な詳細なテキスト記述である。

//The Release Burndown graph records the sum of remaining Product Backlog estimated effort across time. The estimated effort is in whatever unit of work the Scrum Team and organization have decided upon. The units of time are usually Sprints. 

リリースバーンダウンは、プロダクトバックログの残工数の合計を、時間軸でグラフ化したものである。
工数の単位は、チームや組織が決定した作業の単位になる。
時間軸の単位は、通常はスプリントになる。

//Product Backlog item estimates are calculated initially during Release Planning, and thereafter as they are created. During Product Backlog grooming they are reviewed and revised. However, they can be updated at any time. The Team is responsible for all estimates. The Product Owner may influence the Team by helping understand and select trade-offs, but the final estimate is made by the Team. The Product Owner keeps an updated Product Backlog list/ Release Backlog Burndown posted at all times. A trend line can be drawn based on the change in remaining work. 

プロダクトバックログの項目の見積もりは、最初はリリース計画で算出し、あとで作りながら算出していく。
プロダクトバックログの調整では、それをレビューし、改訂する。
ただし、変更はいつでも行うことができる。
チームは、すべての見積もりに責任を負っている。
理解やトレードオフを助けることで、プロダクトオーナーがチームに影響を及ぼすことがあるかもしれない。
しかし、最終的な見積もりはチームが行う。
プロダクトオーナーは、常に更新されるプロダクトバックログやリリースバックログバーンダウンを最新状態で維持管理しておかねばならない。
トレンド線については、残作業に基づいて引くことができる。

//Tip: In some organizations, more work is added to the backlog than is completed. This may create a trend line that is flat or even slopes upwards. To compensate for this and retain transparency, a new floor may be created when work is added or subtracted. The floor should add or remove only significant changes and should be well documented. 

""Tip: 組織によっては、完了するよりも多くの作業がバックログに加えられることもある。このときのトレンド線は、水平か、あるいは上方へ傾斜することになる。これを補い、かつ透明性を確保するには、作業の増減に応じて、新しい下限を設けるとよい。下限は、変更が著しいときにだけ手を加えるようにし、十分にドキュメント化しておくようにする。

//Tip: The trend line may be unreliable for the first two to three Sprints of a release unless the Teams have worked together before, know the product well, and understand the underlying technology. 

""Tip: 初めて一緒になるチームだったり、プロダクトをよく知らなかったり、基盤技術をあまり理解していなかったりすると、リリース初期の2〜3スプリントのトレンド線については、信頼度が低いかもしれない。

//SPRINT BACKLOG AND SPRINT BURNDOWN 
//The Sprint Backlog consists of the tasks the Team performs to turn Product Backlog items into a “done” increment. Many are developed during the Sprint Planning Meeting. It is all of the work that the Team identifies as necessary to meet the Sprint goal. Sprint Backlog items must be decomposed. The decomposition is enough so changes in progress can be understood in the Daily Scrum. 

!!スプリントバックログとスプリントバーンダウン
スプリントバックログは、プロダクトバックログの項目を「完了」インクリメントに変えるためにチームが行うタスクで構成される。
その多くは、スプリント計画ミーティングで作られる。
これは、スプリントゴールを達成するのにチームが必要と考えた作業のすべてである。
スプリントバックログの項目は分解されていなくてはならない。
変化の具合がデイリースクラムで理解できれば、十分に分解できているといえる。

//The Team modifies Sprint Backlog throughout the Sprint, as well as Sprint Backlog emerging during the Sprint. As it gets into individual tasks, it may find out that more or fewer tasks are needed, or that a given task will take more or less time than had been expected. As new work is required, the Team adds it to the Sprint Backlog. As tasks are worked on or completed, the hours of estimated remaining work for each task is updated. When tasks are deemed unnecessary, they are removed. Only the Team can change its Sprint Backlog during a Sprint. Only the Team can change the contents or the estimates. The Sprint Backlog is a highly visible, real-time picture of the work that the Team plans to accomplish during the Sprint, and it belongs solely to the Team. 

チームは、スプリント中に追加されるスプリントバックログだけでなく、スプリントバックログ全体に対して常に修正を加えていく。
個別のタスクに落とし込むなかで、必要なタスクや時間の多寡に気づくかもしれない。
新しい作業が必要になったら、チームはスプリントバックログに作業を加える。
タスクに着手したりタスクを完了したりすれば、見積もり残作業の時間を更新する。
タスクが不必要であれば削除する。
スプリント中にスプリントバックログを変更することができるのはチームだけである。
内容や見積もりを変更することができるのもチームだけである。
スプリントバックログは、
よく目立つところに置かれ、
スプリント中にチームが遂行する作業をリアルタイムに反映したものであり、
チームが占有するものである。

//Sprint Backlog Burndown is a graph of the amount of Sprint Backlog work remaining in a Sprint across time in the Sprint. To create this graph, determine how much work remains by summing the backlog estimates every day of the Sprint. The amount of work remaining for a Sprint is the sum of the work remaining for all of Sprint Backlog. Keep track of these sums by day and use them to create a graph that shows the work remaining over time. By drawing a line through the points on the graph, the Team can manage its progress in completing a Sprint’s work.  Duration is not considered in Scrum. Work remaining and date are the only variables of interest. 


プリントバックログバーンダウンは、スプリントバックログの残作業の量を時間軸で表したグラフである。
このグラフを作成するには、
バックログの見積もりを毎日合計して、
残作業を算出しなければならない。
スプリントの残作業は、スプリントバックログに残された作業の合計である。
この合計値を毎日追跡して、残作業を示すグラフを作る。
グラフ上の点を線で結ぶことで、
チームはスプリントの進捗を管理することができる。
スクラムでは、期間は考慮しない。
残作業と日付だけが対象となる変数である。


//Tip: Whenever possible, hand draw the burndown chart on a big sheet of paper displayed in the Team’s work area. Teams are more likely to see a big, visible chart than they are to look at Sprint burndown chart in Excel or a tool.

""Tip: バーンダウンチャートは、可能な限り、大きな模造紙に手書きで描いて、チームの作業場所に貼り出しておくこと。Excelなどのツールよりも大きく目につくチャートのほうが、チームが目にする可能性が高い。

//One of Scrum’s rules pertains to the purpose of each Sprint, which is to deliver increments of potentially shippable functionality that adheres to a working definition of  “done.” 

スプリントの目的に関係するスクラムのルールがある。
それは、出荷判断可能な機能のインクリメントを納品するために、「完了」の定義を作ることである。

//DONE 
//Scrum requires Teams to build an increment of product functionality every Sprint. This increment must be potentially shippable, for Product Owner may choose to immediately implement the functionality. To do so, the increment must be a complete slice of the product. It must be “done.” Each increment should be additive to all prior increments and thoroughly tested, ensuring that all increments work together. 

!完了
スクラムでは、チームはすべてのスプリントでプロダクト機能のインクリメントを作らなければならない。
このインクリメントは出荷判断可能なものでなければならず、
プロダクトオーナーが直ちに導入を決定できるものでなければならない。
そのためには、インクリメントはプロダクトの完全な断片でなければならない。
そして、それが「完了」していなければならない。
インクリメントは、先行するすべてのインクリメントに付加するものであり、十分にテストされたものであり、すべてが一緒に動くものでなければならない。

//In product development, asserting that functionality is done might lead someone to assume that it is at least cleanly coded, refactored, unit tested, built, and acceptance tested. Someone else might assume only that the code has been built. If everyone doesn’t know what the definition of “done” is, the other two legs of empirical process control don’t work. When someone describes something as “done”, everyone must understand what “done” means. 

機能が完了しているというのは、プロダクト開発の場合、少なくともコードがクリーンで、リファクタリングされていて、ユニットテストが通り、実装が終わり、受入テストが通ったものだと考えるかもしれない。
あるいは、実装が終わっただけのものだと考える人がいるかもしれない。
「完了」の定義が分からないと、経験的プロセス制御の2本の脚が機能しない。
誰かが「完了」について説明すれば、みんなが「完了」の意味を理解するはずだ。

//Done defines what the Team means when it commits to “doing” a Product Backlog item in a Sprint. Some products do not contain documentation, so the definition of “done” does not include documentation. A completely “done” increment includes all of the analysis, design, refactoring, programming, documentation and testing for the increment and all Product Backlog items in the increment. Testing includes unit, system, user, and regression testing, as well as non-functional tests such as performance, stability, security, and integration. Done includes any internationalization. Some Teams aren’t yet able to include everything required for implementation in their definition of done. This must be clear to the Product Owner. This remaining work will have to be done before the product can be implemented and used. 

完了とは、チームがスプリントでプロダクトバックログの項目を「作業中（doing）」にするときの意味を定義するものである。
ドキュメントが含まないプロダクトでは、「完了」の定義にドキュメントが含まれていない。
完全な「完了」インクリメントでは、すべてのプロダクトバックログの項目に対して、分析、設計、リファクタリング、プログラミング、ドキュメント、およびテストが行われる。
テストには、ユニットテスト、システムテスト、ユーザーテスト、回帰テスト、それから、パフォーマンステスト、スケーラビリティテスト、セキュリティテスト、統合テストなどのような非機能テストも含まれる。
完了には国際化も含まれる。
なかには完了の定義をすべて満たせないチームもある。
そのときは、プロダクトオーナーに説明しなければならない。
残作業については、プロダクトを導入する前に完了しなければならないだろう。

//Tip: “Undone” work is often accumulated in a Product Backlog item called “Undone Work” or “Implementation Work.” As this work accumulates, the Product Backlog burndown remains more accurate than if it weren’t accumulated. 

""Tip: 「未完了（Undone）」作業は、「未完了作業（Undone Work）」あるいは「実施検討作業（Implementation Work）」と呼ばれるプロダクトバックログの項目に蓄積する。こうした作業を蓄積しておくと、プロダクトバックログのバーンダウンがきちんと停滞するようになる。

//!FINAL THOUGHTS
//Some organizations are incapable of building a complete increment within one Sprint. They may not yet have the automated testing infrastructure to complete all of the testing. In this case, two categories are created for each increment: the “done” work and the “undone” work. The “undone” work is the portion of each increment that will have to be completed at a later time. 
//The Product Owner knows exactly what he or she is inspecting at the end of the Sprint because the increment meets the definition of “done” and the Product Owner understands the definition. 
//“Undone” work is added to a Product Backlog item named “undone work” so it accumulates and correctly reflects on the Release Burndown graph. 
//This technique creates transparency in progress toward a release. 
//The inspect and adapt in the Sprint Review is as accurate as this transparency. 
//For instance, if a Team is not able to do performance, regression, stability, security, and integration testing for each Product Backlog item, the proportion of this work to the work that can be done (analysis, design, refactoring, programming, documentation, unit and user testing) is calculated. Let’s say that this proportion is six pieces of “done” and four pieces of “undone.” If the Team finishes a Product Backlog item of six units of work (the Team is estimating based on what it knows how to “do”), four are added to the “undone work” Product Backlog item when they are finished. Sprint by Sprint, the “undone” work of each increment is accumulated and must be addressed prior to releasing the product. This work is accumulated linearly although it actually has some sort of exponential accumulation that is dependent on each organization’s characteristics. Release Sprints are added to the end of any release to complete this “undone” work. The number of Sprints is unpredictable to the degree that the accumulation of “undone” work is not linear. 

!まとめ
1つのスプリントで完全なインクリメントを構築することができない組織もある。それは、自動テストのインフラがなくてテストを終了できないからかもしれない。その場合、インクリメントに2つのカテゴリーを作成する。「完了」作業と「未完了」作業である。「未完了」作業は、インクリメントの一部であり、あとで完了しなければならない。プロダクトオーナーは、スプリントの終了時に検査するものを正確に知っている。プロダクトオーナーは「完了」の定義を理解しており、インクリメントがその定義に合っているかを確かめればよい。「未完了」作業は、「未完了作業」という名でプロダクトバックログの項目に追加する。リリースバーンダウンのグラフに正しく反映するためである。これによって、リリースへの進捗の透明性を確保できる。スプリントレビューでの検査と適応は、この透明性と同じくらい正確なものである。

例えば、チームがプロダクトバックログの項目に、パフォーマンステスト、回帰テスト、スタビリティテスト、セキュリティテスト、および結合テストを行うことができなければ、分析、設計、リファクタリング、プログラミング、ドキュメンテーション、ユニットテスト、およびユーザーテストが完了した作業との比率を計算できる。では、仮に「完了」作業が6個、「未完了」作業が4個の割合だとしよう。プロダクトバックログの項目を6個終了したら（チームは「やり方」を知っている前提で見積もっている）、その時点で4個の「未完了」プロダクトバックログの項目を追加する。

スプリントを重ねるごとに、各インクリメントの「未完了」作業は蓄積されるため、プロダクトのリリース直前にこれらの残作業に取り組まなければならない。残作業は、組織の特性に左右されるため指数関数になることもあるが、基本的には直線的に蓄積される。こうした「未完了」作業を消化するためのリリーススプリントをリリース直前に追加する。スプリントの数は、「未完了」作業の蓄積が線形でなければ、予測不能である。


//Some helpful techniques for conducting a Scrum Retrospective are contained in: 

//スクラムレトロスペクティブの実施に役立つ技術は、以下の書籍に記されている：

//“Agile Retrospectives: Making Good Teams Great,” Esther Derby and Diana Larsen, Pragmatic Bookshelf, 2006. 
//“User Stories Applied: For Agile Software Development,” Mike Cohn, Addison-Wesley, 2004. 
//“Writing Effective Use Cases,” Alistair Cockburn, Addison-Wesley, 2000.

//* "Agile Retrospectives: Making Good Teams Great," Ester Derby and Diana Larsen, Pragmatic Bookshelf, 2006.
//** 翻訳『アジャイルレトロスペクティブズ　強いチームを育てる「ふりかえり」の手引き』角征典（訳）、オーム社、2007年
//* "User Stories Applied:For Agile Software Development," Mike Cohn, Addison-Wesley, 2004.
//* "Writing Effective Use Cases," Alistair Cockburn, Addison-Wesley, 2000.
//** 翻訳『ユースケース実践ガイド―効果的なユースケースの書き方』、ウルシステムズ株式会社（監修）、山岸耕二（訳）、矢崎博英（訳）、水谷雅宏（訳）、篠原明子（訳）、翔泳社、2001年

!翻訳

角征典 <kdmsnr@gmail.com>